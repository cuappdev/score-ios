"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Query {
  youtubeVideos: [YoutubeVideoType]
  youtubeVideo(id: String!): YoutubeVideoType
  games(
    """Number of games to return"""
    limit: Int = 100

    """Number of games to skip"""
    offset: Int = 0
  ): [GameType]
  game(id: String!): GameType
  gameByData(city: String!, date: String!, gender: String!, location: String, opponentId: String!, sport: String!, state: String!, time: String!): GameType
  gamesBySport(sport: String!): [GameType]
  gamesByGender(gender: String!): [GameType]
  gamesBySportGender(sport: String!, gender: String!): [GameType]
  teams: [TeamType]
  team(id: String!): TeamType
  teamByName(name: String!): TeamType
}

"""
A GraphQL type representing a YouTube video.

Attributes:
    - id: The YouTube video ID (optional).
    - title: The title of the video.
    - description: The description of the video.
    - thumbnail: The URL of the video's thumbnail.
    - url: The URL to the video.
    - published_at: The date and time the video was published.
"""
type YoutubeVideoType {
  id: String
  title: String!
  description: String!
  thumbnail: String!
  b64Thumbnail: String!
  url: String!
  publishedAt: String!
}

"""
A GraphQL type representing a game.

Attributes:
    - `id`: The ID of the game (optional).
    - `city`: The city of the game.
    - `date`: The date of the game.
    - `gender`: The gender of the game.
    - `location`: The location of the game. (optional)
    - `opponent_id`: The id of the opposing team.
    - `result`: The result of the game. (optional)
    - `sport`: The sport of the game.
    - `state`: The state of the game.
    - `time`: The time of the game. (optional)
    - `box_score`: The box score of the game.
    - `score_breakdown`: The score breakdown of the game.
"""
type GameType {
  id: String
  city: String!
  date: String!
  gender: String!
  location: String
  opponentId: String!
  result: String
  sport: String!
  state: String!
  time: String
  boxScore: [BoxScoreEntryType]
  scoreBreakdown: [[String]]
  team: TeamType
  utcDate: String
}

"""
Represents an individual entry in the box score of a game.

Attributes:
    - `team`: The team involved in the scoring event.
    - `period`: The period or inning of the event.
    - `time`: The time of the scoring event.
    - `description`: A description of the play or scoring event.
    - `scorer`: The name of the scorer.
    - `assist`: The name of the assisting player.
    - `score_by`: Indicates which team scored.
    - `cor_score`: Cornell's score at the time of the event.
    - `opp_score`: Opponent's score at the time of the event.
"""
type BoxScoreEntryType {
  team: String
  period: String
  time: String
  description: String
  scorer: String
  assist: String
  scoreBy: String
  corScore: Int
  oppScore: Int
}

"""
A GraphQL type representing a team.

Attributes:
    - `id`: The ID of the team (optional).
    - `color`: The color of the team.
    - `image`: The image of the team (optional).
    - `b64_image`: The base64 encoded image of the team (optional).
    - `name`: The name of the team.
"""
type TeamType {
  id: String
  color: String!
  image: String
  b64Image: String
  name: String!
}

type Mutation {
  """Creates a new game."""
  createGame(boxScore: String, city: String!, date: String!, gender: String!, location: String, opponentId: String!, result: String, scoreBreakdown: String, sport: String!, state: String!, time: String!, utcDate: String): CreateGame

  """Creates a new team."""
  createTeam(b64Image: String, color: String!, image: String, name: String!): CreateTeam

  """Creates a new youtube video."""
  createYoutubeVideo(b64Thumbnail: String!, description: String!, id: String!, publishedAt: String!, thumbnail: String!, title: String!, url: String!): CreateYoutubeVideo
}

type CreateGame {
  game: GameType
}

type CreateTeam {
  team: TeamType
}

type CreateYoutubeVideo {
  youtubeVideo: YoutubeVideoType
}