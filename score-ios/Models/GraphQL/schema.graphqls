"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Query {
  games: [GameType]
  game(id: String!): GameType
  gameByData(city: String!, date: String!, gender: String!, location: String, opponentId: String!, sport: String!, state: String!, time: String!): GameType
  teams: [TeamType]
  team(id: String!): TeamType
  teamByName(name: String!): TeamType
}

"""
A GraphQL type representing a boxscore.

Attributes:

"""
type BoxScore {
  team: String
  period: String
  time: String
  description: String
  scorer: String
  assist: String
  scoreBy: String
  corScore: Int
  oppScore: Int
}

"""
A GraphQL type representing a game.

Attributes:
    - `id`: The ID of the game (optional).
    - `city`: The city of the game.
    - `date`: The date of the game.
    - `gender`: The gender of the game.
    - `location`: The location of the game.
    - `opponent_id`: The id of the opposing team.
    - `sport`: The sport of the game.
    - `state`: The state of the game.
    - `time`: The time of the game.
"""
type GameType {
  id: String
  city: String!
  date: String!
  gender: String!
  location: String
  opponentId: String!
  result: String
  sport: String!
  state: String!
  time: String
  scoreBreakdown: [[String]]
  boxScore: [BoxScore]
}

"""
A GraphQL type representing a team.

Attributes:
    - `id`: The ID of the team (optional).
    - `color`: The color of the team.
    - `image`: The image of the team (optional).
    - `name`: The name of the team.
"""
type TeamType {
  id: String
  color: String!
  image: String
  name: String!
}

type Mutation {
  """Creates a new game."""
  createGame(city: String!, date: String!, gender: String!, location: String, opponentId: String!, result: String, sport: String!, state: String!, time: String!): CreateGame

  """Creates a new team."""
  createTeam(color: String!, image: String, name: String!): CreateTeam
}

type CreateGame {
  game: GameType
}

type CreateTeam {
  team: TeamType
}
